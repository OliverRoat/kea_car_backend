name: Staging

on:
  push:
    branches:
      - main

jobs:

  pre-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.39
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: password
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
           
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install "fastapi[standard]"
          pip install -r requirements.txt
          
      - name: Create .env file
        run: |
          echo "DB_USER=root" > .env
          echo "DB_NAME=kea_cars_dev" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "SECRET_KEY=secret" >> .env

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run SQL Script
        run: |
          mysql -h 127.0.0.1 -u root -p"password" < scripts/mysql.sql

      - name: Run pytests
        run: |
          pytest

      - name: Start API Server
        run: |
          fastapi dev main.py &

      - name: Wait for API to be ready
        run: sleep 10 

      - name: Install Newman
        run: npm install -g newman

      # Uncommented until the collection supports authentication
      #- name: Run Postman collection with Mysql environment (API tests)
      #  run: newman run ./api-tests/KEA\ Car\ API\ Test.postman_collection.json --environment ./api-tests/KEA\ Car\ Mysql.postman_environment.json
        
      - name: Clone frontend repository
        uses: actions/checkout@v2
        with:
          repository: OliverRoat/kea_car_frontend
          path: frontend

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Start frontend server
        run: |
          cd frontend
          npm run dev &

      - name: Wait for frontend to be ready
        run: sleep 10

      - name: Install Cypress
        run: |
          cd frontend
          npm install cypress

      # Uncommented until any Cypress tests are added to the frontend
      #- name: Run Cypress tests (E2E)
      #  run: |
      #    cd frontend
      #    npx cypress run

  deploy-staging:
    runs-on: ubuntu-latest
    needs:
      - pre-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create .env file
      run: echo "${{ secrets.ENV_FILE }}" > .env

    - name: SSH and Remove old files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace
    
    - name: SCP files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: "${{ secrets.SERVER_HOST }}"
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "${{ github.workspace }}"
        target: "${{ secrets.SERVER_LOCATION }}"
    
    - name: SSH and Docker build
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.SERVER_LOCATION }}/github/workspace
          chmod +x ./scripts/wait-for-it.sh
          chmod +x ./scripts/start_and_restore.sh
          chmod +x ./scripts/wait_for_sonarqube.sh          
          docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
          docker-compose -f docker-compose.yaml down
          docker-compose -f docker-compose.yaml up -d
          docker image prune -f

  load-test:
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Clean Up Monitoring Logs
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "rm -rf /logs/*"

      - name: Start Server Monitoring 
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "nohup sar 1 60 > /logs/cpu_mem_usage.log &"
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "nohup iostat -x 1 60 > /logs/disk_usage.log &"
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "nohup vmstat 1 60 > /logs/vmstat_usage.log &"

      - uses: actions/checkout@v3
      
      - name: Create reports directory
        run: mkdir reports

      - name: JMeter Test
        uses: QAInsights/PerfAction@v5.6.2
        with:
          test-plan-path: ./load-tests/test-plan.jmx
          args: "-e -o ./reports/html/"

      - name: Stop Server Monitoring
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "killall sar iostat vmstat"

      - name: SCP Load test reports to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: "${{ secrets.SERVER_HOST }}"
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./reports"
          target: "${{ secrets.SERVER_LOCATION }}/github/workspace/reports"